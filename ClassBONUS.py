# -*- coding: utf-8 -*-
"""Untitled23.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fgkn5br4-WVkEBw53ANSTdRYZEP4iRCM
"""

import random

class Bonus:
    """
    Classe pour gérer les bonus dans ce jeu.
    """

    TYPES_BONUS = ["vies", "bouclier", "réduction_pénalité", "temps_supplémentaire"]

    def __init__(self, type_bonus=None):
        """
        Initialise un bonus.

        Si None, un bonus sera choisi aléatoirement.
        """
        if type_bonus and type_bonus not in self.TYPES_BONUS:
            raise ValueError(f"Type de bonus invalide. Choisissez parmi : {', '.join(self.TYPES_BONUS)}")

        self.type_bonus = type_bonus if type_bonus else random.choice(self.TYPES_BONUS)

    def appliquer_bonus(self, difficulte):
        """
        Applique l'effet du bonus sur les paramètres de la difficulté.
        """
        if self.type_bonus == "vies":
            difficulte.ajuster_vies(1)  # Ajoute une vie
            print("Bonus activé : +1 vie !")

        elif self.type_bonus == "bouclier":
            difficulte.paramètres["santé_initiale"] += 15  # Bouclier temporaire
            print("Bonus activé : Bouclier temporaire ajouté (+15 santé) !")

        elif self.type_bonus == "réduction_pénalité":
            difficulte.paramètres["pénalité"] = max(0, difficulte.paramètres["pénalité"] - 5)  # Réduit la pénalité
            print("Bonus activé : Pénalité réduite de 5 !")

        elif self.type_bonus == "temps_supplémentaire":
            difficulte.paramètres["durée_max"] += 30  # Ajoute 30 secondes
            print("Bonus activé : +30 secondes de temps supplémentaire !")

    def __str__(self):
        """
        Représente le bonus sous forme textuelle.
        """
        descriptions = {
            "vies": "Ajoute une vie supplémentaire.",
            "bouclier": "Ajoute un bouclier temporaire (+15 santé).",
            "réduction_pénalité": "Réduit la pénalité de 5.",
            "temps_supplémentaire": "Ajoute 30 secondes au temps maximum.",
        }
        return descriptions.get(self.type_bonus, "Bonus inconnu.")